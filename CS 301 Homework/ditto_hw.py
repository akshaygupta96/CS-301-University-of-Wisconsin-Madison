# My name: Akshay Gupta
# Partner: Sofia Noejovich

def generate_pokemon(names,powers):
  """This function takes the list of names and powers and picks a random name and power and in the dictionary pokemon assigns the random name and power to the keys 'name' and 'power'"""
  randname=random.choice(names) # picks a random name from the given list of names
  randpowers=random.choice(powers) #picks a random power from the given list of powers
  pokemon={'name': randname, 'power': randpowers, 'level': random.randint(1, 10)} # creates the dictionary pokemon assinging the key 'name' to the randname and the key 'power' to randpowers
  return pokemon #returns the dictionary pokemon

def get_level(ditto):
  """ This function computes the average of all the pokemon ditto has absorbed so far"""
  average=(float(sum(ditto['level'])))/(float(len(ditto['level']))) #This takes the sum of all the ditto levels and turns it into an integer so that python does not compute integer divison. It then divides it by the number of elements in the list to compute the average
  return average #returns the value of the average

def should_absorb(ditto,pokemon):
  """This function checks if ditto's level increases when ditto absorbs the new pokemon. If it does, True is returned. If not, False is returned."""
  average=get_level(ditto) #get current average from get_level(ditto)
  new_average= (float((sum(ditto['level']))+pokemon['level']))/(float((1+len(ditto['level'])))) #calculates new average by adding the new pokemon's level to the the total and increases the number of values by 1
  if new_average>average: #if new_average is greater than the old average
    return True #function returns True
  else: #else
    return False #function returns False

def absorb(ditto,pokemon):
  """This function adds on the level, power and number of pokemon absorbed (count) to ditto whenever called by appending level and power to the lists in ditto and increasing the pokemon absorbed counter by 1."""
  ditto['level'].append(pokemon['level']) #adds new level to the list 'level' in ditto
  if pokemon['power'] not in ditto['power']:
    ditto['power'].append(pokemon['power']) #adds new power to the list 'power' in ditto
  ditto['count']= ditto['count']+1 #adds 1 to 'count' in ditto

def take_walk(poke_list):
  """This function initializes the dictionary for ditto. Then, using a while loop, it uses the should absorb function to determine whether ditto should absorb the pokemon. It uses boolean expressions for if the ditto does not contain that power, it will absorb the pokemon despite the conditions of the should_absorb function. Then it returns the dictionary for ditto."""
  ditto={'power':['absorb'], 'count':0, 'level':[1]} #defines initial dictionary for ditto
  counter1=0 #initialize counter
  while counter1<len(poke_list): #creates while loop for when counter1 is less than the length of the poke_list
    pokemon=poke_list[counter1] #pokemon is equal to each element in poke_list which is a list of dictionaries
    counter1=counter1+1 #increases the counter by 1 continues and the loop proceeds and ends
    if should_absorb(ditto,pokemon)==True: #if should_absorb(ditto,pokemon) return True
      absorb(ditto,pokemon) #runs absorb(ditto,pokemon)
    elif pokemon['power']not in ditto['power']:# if one of the powers in the pokmeon's dictionary is not in ditto, it will run the absorb function
      absorb(ditto,pokemon) #runs function so that ditto absorbs the pokemon
  return ditto #returns dictionary for ditto



import random #allows for python to select random numbers for encripted functions
random.seed(100) #chooses a random and fixes it
name_list = ['squirtle', 'bulbasaur', 'charmander', 'pikachu'] #defines name_list
power_list = ['growl', 'slam', 'splash', 'cut', 'pulverizing pancake'] #defines power_list
poke_list = [generate_pokemon(name_list, power_list) for i in range(5)] #defines poke_list as a list of dictionaries(pokemon) generated by the function generate_pokemon(names,powers)
take_walk(poke_list) #runs the function take_walk(poke_list)