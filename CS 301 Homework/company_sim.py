# My name: Akshay Gupta
# Partner: Sofia Noejovich

def create_employee():
  """This function creates the dictionary of an employee by choosing between True and False using the random.choice function and a random score depending on whether they were favored or not"""
  Trueorfalse=[True,False] #assings Trueorfalse to be  a list of strings either True or False
  employeerandom=random.choice(Trueorfalse) # employeerandom is assigned to randomly be either True or False
  if employeerandom==True:#if the selected value of employeerandom is True
    scoregenerator=random.randint(1,100)# chooses a random integer between 1 and 100 to be assigned to scoregenerator
  elif employeerandom==False:#if the selected value of employeerandom is False
    scoregenerator=random.randint(0,99)#chooses a random integer between 1 and 99 for scoregenerator
  employee={'favored':employeerandom,'score':scoregenerator}#creates the dictionary for an employee with assigned favored value ands score value
  return employee #returns the dictionary

def create_company(sizes):
  """This function creates a company which is a list of list of dictionaries in which the indexes in the list, sizes represents the number of dictionaries, each randomly generated by create_employee()."""
  list1=[] #creates an empty list, list
  counter=0 #initiates counter at 0
  while counter<len(sizes): #initiates while loop for the length of sizes
    x=sizes[counter] #defines x as the indexes of sizes
    dictlist=[] #creates an empty list, dictlist
    counter=counter+1 #adds 1 to the counter so that loops continues to completion
    for element in range(x): #initiates for loop for range x
      y=create_employee() #runs create_employee() and defines the return as y
      dictlist.append(y) #appends y into dictlist
    list1.append(dictlist) #appends dictlist into list
  return list1 #returns list

def get_pct_favored(company,level):
  """creates a percentage from the company and selected level of how many employees are favored in that level"""
  favorcounter=0 #initializes counter for number of favored employees on a level
  accesslevel=company[level]#assigns accesslevel to be a specific index that allows it to be a certain level in the company
  for employee in accesslevel:# creates a for loop for an empoyee in a specific level
    if employee['favored']==True: #boolean expression that if the employee in that level is favored
      favorcounter=favorcounter+1 #adds to a counter that will determine number of favored employees in a level
  return float(favorcounter)/float(len(accesslevel)) #creates an average of the number of employees by adding up all the favored employees and dividing by the total number  of employees in a level

def main(num_simulations,sizes,pct):
  """This function creates a list of companies based on the number of simulations. Then, within each company, it takes each level, calculates the level, and then returns a list of averages for each company. From that list, the for loop initializes a counter and calculates an average for each company and each level and returns that in the necessary print statement."""
  print "After", num_simulations, "trials, here are the average distributions of employees: \n" #print statement for the simulation
  print "          favored non-favored" #prints titles for the lists
  company_list=[] #empty company list
  counter_create_company=0 #initialize  counter_create_company
  access_company_counter=0 # initialize access_company_counter
  counter=0 #initialize counter
  percentage_list=[] #empty percentage list
  total_percentage=0 #initialize total percentage counter

  while counter_create_company<num_simulations: #initialize while loop that creates a list of companies based on the number of simulations
    company=create_company(sizes)  # company is equal to the function create_company where each company has as many levels as inputted by the user
    company_list.append(company) #appends all the companies to a list
    counter_create_company=counter_create_company+1 # allows the while loop to continue using a counter
    #print company
    #print range(len(company))
    #access each company and create a list of averages for each company
  while access_company_counter<len(company_list): #intialize while loop that goes through each company
    company=company_list[access_company_counter] #gives access to the first company
    access_company_counter=access_company_counter+1 #allows the company to continue to loop through
    level_list=[] #creates an empty list for each company
    level=0 #initialize level
    for level in range(len(company)): #initialize for loop that while in one company allows access to each level
        #print level
        #print get_pct_favored(company,level)
      level_list.append(get_pct_favored(company,level)) #takes the average of each level in a company and appends that to a list
    percentage_list.append(level_list) #appends the list of percentages to a list for all the average percentages in a company
  #print percentage_list
  for level_no in range(len(percentage_list[0])): # initialize for loop allowing access to each list of percentages in percentage_list
    total_percentage=0 #initialize total_percentage counter
    for company_no in range(len(percentage_list)): #initiLIZES for loop allowing access to each element in percentage_list
      #print percentage_list[company_no][level_no]
      total_percentage=(percentage_list[company_no][level_no])+float(total_percentage) # goes through each company and each level and adds up the total percentages
      average_percentage=int((total_percentage/float(num_simulations))*100.0) #calculates the average percentage by dividing by the num_simulations
      not_average_percentage=100-average_percentage #gives the averages of people not favored
    #print total_percentage
    #print average_percentage
    print "Level", level_no,' | ', str(int(average_percentage))+"%", ' | ', str(int(not_average_percentage))+"%" #print statement to structure the outputs